/**
This library contains nimdings for macOS & iOS CoreMIDI, useful sending musical performance data to other applications or communicating with external musical devices.

Description:
This library is a (currently incomplete) wrapper for Apple's CoreMIDI API.

>*Note:* This library is MIT licensed (permissive).
> Please share and share a like.
*/
library community.coremidi.paulmcclernan

use com.livecode.engine
use com.livecode.foreign
use com.livecode.objc
use com.livecode.array
use com.livecode.list
use com.livecode.byte
use com.livecode.binary

metadata version is "0.2.4"
metadata author is "Paul McClernan"
metadata title is "CoreMIDI library"
metadata svgicon is "M47.5,19.4l-4.3,0c0,0,1.4-1.1,2-1.9c-0.2-0.2-0.4-0.4-0.7-0.7c-0.4,0.4-0.8,0.6-1.1,0.8c-0.3,0.2-0.6,0.3-1,0.4c-0.2,0-0.6,0.1-1.2,0.1l-0.7-0.3c-0.3-0.1-0.6-0.4-1-0.7c-0.3-0.3-0.6-0.7-0.8-1.1c-0.2-0.4-0.4-0.9-0.5-1.5c-0.1-0.6-0.2-1.1-0.2-1.6c0-0.1,7-0.2,7-0.2s-0.1-1.4-0.3-1.9c-0.2-0.5-0.4-1-0.7-1.4c-0.3-0.4-0.6-0.8-1.1-1.1C42.9,8,42.5,7.8,42,7.7c-0.5-0.1-1.1-0.2-1.8-0.2c-0.3,0-0.8,0.1-1.3,0.3c-0.4,0.1-0.9,0.4-1.4,0.9c-0.5,0.4-1,1.1-1.4,1.9c-0.2,0.3-0.3,0.8-0.6,1.6c-0.1,0.7-0.2,1.4-0.2,2.3c0,0.4,0.1,1,0.3,1.8c0.2,0.6,0.4,1.1,0.7,1.6c0.3,0.5,1.5,1.6,1.5,1.6l-3.9,0c0,0,0-0.1,0-0.1c0-0.2,0-0.3-0.1-0.4c-0.1-0.1-0.3-0.1-0.7-0.2c-0.4,0-0.6-0.1-0.8-0.1c-0.1-0.1-0.3-0.2-0.4-0.3c-0.4-0.7-0.3-6.4-0.3-6.4s0-0.7,0.3-1.2c0.1-0.3,0.3-0.5,0.5-0.5l0.1,0c0.1,0,0.3,0.1,0.5,0.3c0.4,0.3,0.7,0.5,1.1,0.5c0.4,0,0.7-0.2,0.9-0.5c0.2-0.4,0.4-0.8,0.4-1.2c0-0.5-0.2-0.9-0.5-1.2c-0.3-0.3-0.7-0.5-1.1-0.5c-0.3,0-0.7,0.1-0.9,0.4c-0.4,0.4-0.6,0.6-0.6,0.7c-0.1,0.2-0.7,1.4-0.7,1.4l0-3l-0.8,0c-0.1,0.1-0.2,0.3-0.3,0.5c-0.2,0.4-0.6,0.8-1.1,1.2c-0.5,0.4-1,0.6-1.6,0.7l0,0.5c0,0.2,0.1,0.3,0.3,0.3c0.3,0.1,0.6,0.2,0.8,0.3c0.1,0.1,0.2,0.4,0.2,0.4s0.2,7,0,7.3c-0.1,0.2-0.8,0.5-1.2,0.6c-0.2,0.1-0.3,0.1-0.4,0.2c0,0.1,0,0.3,0,0.3h-2.8c0.1-0.1,0.2-0.1,0.3-0.1c0.8-0.6,1.5-1.5,2-2.7c0.3-0.8,0.5-1.8,0.5-3.1c0-0.7-0.1-1.4-0.4-2.2c-0.3-0.8-0.6-1.5-1.1-2.1c-0.9-1.2-2.2-1.8-3.9-1.8c-0.8,0-1.4,0.1-2,0.3c-0.5,0.2-1.1,0.5-1.6,1c-0.4,0.3-0.7,0.7-1,1.2c-0.3,0.5-0.5,1.1-0.7,1.7c-0.2,0.7-0.3,1.3-0.3,1.9c0,1.3,0.2,2.3,0.6,3.2c0.4,0.9,1,1.6,1.9,2.3c0.1,0.1,0.4,0.3,0.4,0.3l-5.2,0l1.1-0.7l0.7-4.1l-1.2,0.1c0,0-1.5,2.3-2.4,3c-0.8,0.7-1.7,1-2.5,1c-0.8,0-1.5-0.2-2.2-0.7c-0.5-0.3-1-0.7-1.3-1.3C4.3,13.1,4.5,6.4,6.6,3.9c0.9-1.1,1.8-1.8,3-1.8c1,0,1.9,0.3,2.7,0.9s2.4,2.8,2.4,2.8h1.1l-0.9-4.4c0,0-1.6-0.4-2.4-0.5c-0.9-0.1-1.8-0.2-2.8-0.2c-2.4,0-4.4,0.9-6,2.8c-1.6,1.9-2.4,4.3-2.4,7.1c0,1.2,0.1,2.3,0.4,3.2c0.3,1,0.6,1.8,1.2,2.7C3.4,17.3,4.1,18,5,18.7c0.4,0.3,0.8,0.5,1.3,0.7H0.5v19.7h5.4v-15h2.7v15h5.4v-15h2.7v15H22l0-17.8c0-0.5-0.2-0.9-0.5-1.2c0.2,0,0.3,0,0.5,0c0.7,0,1.4-0.2,2-0.4v19.4h5.4V19.7l2.1,0v4.5H44v10.2h-7.1v-7.5h-5.4v12.3h15.9c1,0,1.9-0.8,1.9-1.9l0-15.9c0-0.5-0.2-1-0.5-1.3C48.5,19.6,48,19.4,47.5,19.4z M39,9.3c0.4-0.6,0.9-0.9,1.4-0.9c0.4,0,0.7,0.1,1.1,0.4c0.4,0.3,0.6,0.7,0.8,1.2c0.2,0.5,0.3,1,0.3,1.6c-0.1,0-0.3,0-0.3,0c-0.1,0-0.3,0-0.5,0c-0.3,0-0.6,0-0.7,0l-2.7,0C38.3,10.6,38.6,9.8,39,9.3zM22.1,19.2c-0.5,0-0.9-0.1-1.3-0.3c-0.4-0.2-0.6-0.5-0.8-0.8c-0.2-0.5-0.4-1-0.5-1.7c0-0.2-0.1-0.9-0.2-2.1c0-1.7,0.1-2.8,0.2-3.4c0.2-0.8,0.4-1.4,0.8-1.8c0.4-0.4,0.9-0.6,1.5-0.6c0.8,0,1.4,0.4,1.9,1.1c0.5,0.7,0.7,2,0.7,3.7c0,1.4-0.1,2.5-0.2,3.1c-0.2,1-0.5,1.7-0.9,2.1C23.1,18.9,22.7,19.2,22.1,19.2z,M56.8,3.9c-0.7,0-1.5,0.5-2,1c-0.4,0.5-0.8,1.3-0.7,2.1c0.8,0.1,1.6-0.4,2-1C56.6,5.5,56.9,4.7,56.8,3.9zM57.9,11.2c0-1.7,1.4-2.6,1.5-2.6c-0.8-1.2-2.1-1.3-2.5-1.4c-1.1-0.1-2.1,0.6-2.6,0.6c-0.5,0-1.4-0.6-2.3-0.6c-1.2,0-2.2,0.7-2.8,1.7c-1.2,2.1-0.3,5.2,0.9,6.9c0.6,0.8,1.3,1.8,2.2,1.7c0.9,0,1.2-0.6,2.2-0.6c1,0,1.3,0.6,2.3,0.5c0.9,0,1.5-0.8,2.1-1.7c0.7-1,0.9-1.9,0.9-1.9C59.7,14,57.9,13.3,57.9,11.2z"

/**
START BLOCK
**/

public foreign type BlockDescriptor binds to "MCAggregateTypeInfo:ffrrr"
public foreign type Block binds to "MCAggregateTypeInfo:rEErr"
-- private handler type CoreMIDIReceiverCallbackBlock(in pContext as Pointer) returns nothing
private handler type CoreMIDISetupChangedCallbackBlock(in pContext as Pointer) returns nothing
-- This method returns an block of memory containing the same contents as the provided one.
-- MC_DLLEXPORT bool MCMemoryAllocateCopy(const void *block, size_t size, void*& r_new_block);
foreign handler CopyBlockDescriptor(inout pBlock as BlockDescriptor, in pSize as UIntSize, out rNewBlock as Pointer) returns CBool binds to "MCMemoryAllocateCopy"
-- MC_DLLEXPORT bool MCHandlerGetFunctionPtr(MCHandlerRef handler, void*& r_func_ptr);
-- foreign handler MCHandlerGetFunctionPtr(in pBlockCallback as CoreMIDIReceiverCallbackBlock, out rPtr as Pointer) returns CBool binds to "<builtin>"
foreign handler MCHandlerGetFunctionPtr(in pBlockCallback as CoreMIDISetupChangedCallbackBlock, out rPtr as Pointer) returns CBool binds to "<builtin>"
-- This method returns an block of memory containing the same contents as the provided one.
-- MC_DLLEXPORT bool MCMemoryAllocateCopy(const void *block, size_t size, void*& r_new_block);
foreign handler CopyBlock(inout pBlock as Block, in pSize as UIntSize, out rNewBlock as Pointer) returns nothing binds to "MCMemoryAllocateCopy"
--  This method deletes a fixed size record that was allocated with MCMemoryNew.
-- MC_DLLEXPORT void MCMemoryDelete(void *p_record);
foreign handler MCMemoryDelete(in pBlock as Pointer) returns nothing binds to "<builtin>"
constant kBlockSize is 32
constant kBlockDescriptorSize is 40
private handler CreateSetupChangedFunctionBlock(in pFunction as any, out rBlockPtr as Pointer, out rBlockDescriptorPointer as Pointer) returns nothing
  variable tBlock as Block
  variable tBlockDescriptor as BlockDescriptor
  put [0,kBlockSize,nothing,nothing,nothing] into tBlockDescriptor
  unsafe
	 CopyBlockDescriptor(tBlockDescriptor, kBlockDescriptorSize, rBlockDescriptorPointer)
	 variable tInvokePointer as Pointer
	 MCHandlerGetFunctionPtr(pFunction, tInvokePointer)
	 put [nothing,0,0,tInvokePointer,rBlockDescriptorPointer] into tBlock
	 CopyBlock(tBlock, kBlockSize, rBlockPtr)
  end unsafe
end handler
private handler DeleteSetupChangedFunctionBlock(in pBlockPtr as Pointer, in pBlockDescriptorPointer as Pointer) returns nothing
  unsafe
	 MCMemoryDelete(pBlockPtr)
	 MCMemoryDelete(pBlockDescriptorPointer)
  end unsafe
end handler
public handler CoreMIDISetupChangedCallbackProc(in pContext as Pointer) returns nothing
   -- in tMsg as optional any, in tRefCon as optional any
   post "put CoreMIDISetupChanged"
    -- MCEngineRunloopBreakWait()
end handler
/**
END BLOCK
**/
-------------------------------------------------------- Types & Structs ------------------------------------
public foreign type MIDIPacket binds to "MCAggregateTypeInfo:kihhh" --kihhhhhhhh... k=UInt64  i=UInt16 h=3 x UInt8 -- MIDIPacket (timeStamp: MIDITimeStamp, length: UInt16, data: Data: ARRAY OF Bytes(256) x UInt8 )  -- UInt64,UInt16,Data(256))
public foreign type MIDIMsg binds to "MCAggregateTypeInfo:hhh" -- h=3 x UInt8
public foreign type MIDIPacketList binds to "MCAggregateTypeInfo:jr" -- Declaration (numPackets: UInt32, *packet(MIDIPacket)) -- j = UInt32
public foreign type TimeBaseInfo binds to "MCAggregateTypeInfo:jj"
public type MIDITimeStamp is UInt64
------------------------------------------------ MIDI Clients------------------------------------------------
private foreign handler c_MIDIClientCreate(in pClientNameCFStrngRef as ObjcId, in pMIDINotifyProc as optional any, in pNotifyRefConst as optional any, \
                                              out rMIDIClientRef as ObjcId) returns CSInt binds to "c:CoreMIDI.framework>MIDIClientCreate"
private foreign handler c_MIDIClientDispose(in pMIDIClientRef as ObjcId) returns CSInt binds to "c:CoreMIDI.framework>MIDIClientDispose"
------------------------------------------------  MIDI Ports ------------------------------------------------------------
private foreign handler c_MIDIInputPortCreate(in pMIDIClientRef as ObjcId, in pInputPortNameCFStrngRef as ObjCId, out rMIDIInputPortRef as ObjcId) returns CSInt binds to "c:CoreMIDI.framework>MIDIInputPortCreate"
private foreign handler c_MIDIOutputPortCreate(in pMIDIClientRef as ObjcId, in pOutPortNameCFStrngRef as ObjCId, out rMIDIOutPortRef as ObjcId) returns CSInt binds to "c:CoreMIDI.framework>MIDIOutputPortCreate"
private foreign handler c_MIDIPortDispose( in pMIDIPortRef as ObjCId) returns CSInt binds to "c:CoreMIDI.framework>MIDIPortDispose"
private foreign handler c_MIDIPortConnectSource(in pMIDIPortToConnectRef as ObjcId, in MIDISourceEndpointToConnectRef as ObjcId, in connRefCon as optional any) returns CSInt binds to "c:CoreMIDI.framework>MIDIPortConnectSource"
private foreign handler c_MIDIPortDisonnectSource( in pMIDIPortRef as ObjCId,in pMIDIEndpointRef as ObjCId) returns CSInt binds to "c:CoreMIDI.framework>MIDIPortDisonnectSource"
------------------------------------------------  MIDI Sources ------------------------------------------------------------
private foreign handler c_MIDISourceCreate(in pMIDIClientRef as ObjcId, in pSourceNameStrRef as ObjCId, out rMIDISourceEndPointRef as ObjcId) \
                                                                                 returns CSInt binds to "c:CoreMIDI.framework>MIDISourceCreate"
private foreign handler c_MIDIGetNumberOfSources() returns CInt binds to "c:CoreMIDI.framework>MIDIGetNumberOfSources"
private foreign handler c_MIDIGetSource( in pSourceIndexNum as optional UInt32) returns optional ObjCId binds to "c:CoreMIDI.framework>MIDIGetSource" -- Returns a reference to a source, or NULL if an error occurred.
------------------------------------------------  MIDI Destinations ------------------------------------------------------------
-- OSStatus MIDIDestinationCreate(MIDIClientRef client, CFStringRef name, MIDIReadProc readProc, void *refCon, MIDIEndpointRef *outDest); Creates a virtual destination in a client.
private foreign handler c_MIDIDestinationCreate(in pMIDIClientRef as ObjcId, in pMIDIDestinationNameStrRef as ObjcId, in pMIDIReadProc as optional any, in pRefConst as optional any, \
                                                   out rMIDIDestEndpointRef as ObjcId) returns CSInt binds to "c:CoreMIDI.framework>MIDIDestinationCreate"
private foreign handler c_MIDIGetNumberOfDestinations() returns CInt binds to "c:CoreMIDI.framework>MIDIGetNumberOfDestinations"
private foreign handler c_MIDIGetDestination(in pSourceIndexNum as optional UInt32) returns ObjCId binds to "c:CoreMIDI.framework>MIDIGetDestination"
------------------------------------------------  MIDI Endpoints------------------------------------------------------------
-- OSStatus MIDIEndpointDispose(MIDIEndpointRef endpt); -- Disposes a virtual source or destination your client created.
-- endpt = The endpoint to be disposed, returns a result code.
private foreign handler c_MIDIEndpointDispose(in pMIDIEndpointRef as ObjcId) returns CSInt binds to "c:CoreMIDI.framework>MIDIEndpointDispose"
-- OSStatus MIDIEndpointGetEntity(MIDIEndpointRef inEndpoint, MIDIEntityRef *outEntity);
-- inEndpoint = The endpoint being queried. outEntity = On exit, the endpoint's owning entity, or NULL if none.
private foreign handler c_MIDIEndpointGetEntity(in pMIDIEndpointRef as ObjcId, out pEntityRef as optional ObjCId) returns CSInt binds to "c:CoreMIDI.framework>MIDIEndpointGetEntity"
-- OSStatus MIDIEntityGetDevice(MIDIEntityRef inEntity, MIDIDeviceRef *outDevice);
-- inEntity = The entity being queried. outDevice = On successful return, the entity's owning device.
------------------------------------------------  MIDI Entities ------------------------------------------------------------
private foreign handler c_MIDIEntityGetDevice(in pMIDIEntitytRef as ObjcId, out rDeviceRef as optional ObjCId) returns CSInt binds to "c:CoreMIDI.framework>MIDIEntityGetDevice"
-- ItemCount MIDIEntityGetNumberOfSources(MIDIEntityRef entity);
private foreign handler c_MIDIEntityGetNumberOfSources(in MIDIEntityRef as ObjCId) returns CInt binds to "c:CoreMIDI.framework>MIDIEntityGetNumberOfSources"
-- MIDIEndpointRef MIDIEntityGetSource(MIDIEntityRef entity, ItemCount sourceIndex0);
-- entity = entity being queried, sourceIndex0 = index (0...MIDIEntityGetNumberOfSources(entity)-1) of the source to return. Return Value is reference to a source, or NULL if an error occurred.
private foreign handler c_MIDIEntityGetSource(in pMIDIEntitytRef as ObjcId, in pSourceIndex as Cint) returns ObjCId binds to "c:CoreMIDI.framework>MIDIEntityGetSource"
-- ItemCount MIDIEntityGetNumberOfDestinations(MIDIEntityRef entity);
private foreign handler c_MIDIEntityGetNumberOfDestinations(in MIDIEntityRef as ObjCId) returns CInt binds to "c:CoreMIDI.framework>MIDIEntityGetNumberOfDestinations"
-- MIDIEndpointRef MIDIEntityGetDestination(MIDIEntityRef entity, ItemCount destIndex0);
-- entity = entity being queried, sourceIndex0 = index (0...MIDIEntityGetNumberOfDestinations(entity)-1) of the source to return. Return Value is reference to a source, or NULL if an error occurred.
private foreign handler c_MIDIEntityGetDestination(in pMIDIEntitytRef as ObjcId, in pDestIndex as Cint) returns ObjCId binds to "c:CoreMIDI.framework>MIDIEntityGetDestination"
----------------------------------------------------------------- MIDI Devices ------------------------------------------------------------
private foreign handler c_MIDIGetNumberOfDevices() returns CInt binds to "c:CoreMIDI.framework>MIDIGetNumberOfDevices"
private foreign handler c_MIDIGetNumberOfExternalDevices() returns CInt binds to "c:CoreMIDI.framework>MIDIGetNumberOfExternalDevices"
private foreign handler c_MIDIGetExternalDevice(in pSourceIndexNum as optional UInt32) returns ObjCId binds to "c:CoreMIDI.framework>MIDIGetExternalDevice"
private foreign handler c_MIDIGetDevice(in pSourceIndexNum as optional UInt32) returns ObjCId binds to "c:CoreMIDI.framework>MIDIGetDevice"
private foreign handler c_MIDIDeviceGetNumberOfEntities(in pMIDIDeviceRef as ObjCId) returns CInt binds to "c:CoreMIDI.framework>MIDIDeviceGetNumberOfEntities"
private foreign handler c_MIDIDeviceGetEntity(in pDeviceRef as ObjCId, in pSourceIndexNum as UInt32) returns ObjCId binds to "c:CoreMIDI.framework>MIDIDeviceGetEntity"
----------------------------------------------------------------- MIDI IO --------------------------------------------------------------------------
private foreign handler c_MIDIReceived(in pMIDIEndpointRef as ObjCId, in pMIDIPacketListPtr as Pointer) returns CSInt binds to "c:CoreMIDI.framework>MIDIReceived" -- OSStatus MIDIReceived(MIDIEndpointRef src, const MIDIPacketList *pktlist);ai -- Use for SENDING Notes To Virstual Source (not MIDISend)
private foreign handler c_MIDISend(in pMIDIPortRef as ObjcId, in pMIDIEndpointRef as ObjCId, in pMIDIPacketList as Pointer) returns CSInt binds to "c:CoreMIDI.framework>MIDISend"
private foreign handler c_MIDIPacketListInit(in pMIDIPacketListByteBuffer as Pointer) returns Pointer binds to "c:CoreMIDI.framework>MIDIPacketListInit"
private foreign handler c_MIDIPacketNext(in pMIDIPacketListByteBuffer as Pointer) returns Pointer binds to "c:CoreMIDI.framework>MIDIPacketNext"
private foreign handler c_MIDIPacketListAdd(in pMIDIPacketListByteBuffer as Pointer, in pPacketsCnt as UInt32, in pMIDIPacket as Pointer, in pMIDITimeStamp as UInt64, pPcktByteCnt as UInt16, in pPacket as Pointer) returns Pointer binds to "c:CoreMIDI.framework>MIDIPacketListAdd"
private foreign handler c_MIDIRestart() returns CSInt binds to  "c:CoreMIDI.framework>MIDIRestart" -- OSStatus MIDIRestart(void); This is useful for forcing CoreMIDI to ask its drivers to rescan for hardware.
private foreign handler c_MIDIFlushOutput(in MIDIEndpointRef as optional ObjcId) returns CSInt binds to  "c:CoreMIDI.framework>MIDIFlushOutput" -- OSStatus MIDIFlushOutput(MIDIEndpointRef dest); -- Parameters dest, All pending events scheduled to be sent to this destination are unscheduled. If NULL, the operation applies to all destinations.
----------------------------------------------------------------- MIDI Object Properties ------------------------------------------------------------
-- OSStatus = MIDIObjectFindByUniqueID(MIDIUniqueID inUniqueID, MIDIObjectRef *outObject, MIDIObjectType *outObjectType);
-- inUniqueID of object to search for (This should be the result of an earlier call to MIDIObjectGetIntegerProperty "UniqueID")
-- outObject returned object, or NULL if the object was not found or an error occurred. This should be cast to the appropriate type (MIDIDeviceRef, MIDIEntityRef, MIDIEndpointRef), according to *outObjectType.
-- outObjectType on exit, the type of object which was found; undefined if none found.
-- Return Value is sn OSStatus error code, including kMIDIObjectNotFound if there is no object with the specified uniqueID.
private foreign handler c_MIDIObjectFindByUniqueID(in pMIDIObjectUID as SInt32, out rMIDIObjectRef as optional ObjCId, out rMIDIObjectType as optional SInt32) returns CSInt binds to "c:CoreMIDI.framework>MIDIObjectFindByUniqueID"
-- OSStatus MIDIObjectGetIntegerProperty(MIDIObjectRef obj, CFStringRef propertyID, SInt32 *outValue);
private foreign handler c_MIDIObjectGetIntegerProperty(in pMIDIObjectRef as optional ObjCId, in rPropertyIDCFStrRef as ObjCId, out rPropertyVal as optional SInt32) returns CSInt binds to "c:CoreMIDI.framework>MIDIObjectGetIntegerProperty"
--OSStatus MIDIObjectSetIntegerProperty(MIDIObjectRef obj, CFStringRef propertyID, SInt32 newvalue);
private foreign handler c_MIDIObjectSetIntegerProperty(in pMIDIObjectRef as ObjCId, in rPropertyIDCFStrRef as ObjCId, in rPropertyVal as optional SInt32) returns CSInt binds to "c:CoreMIDI.framework>MIDIObjectSetIntegerProperty"
-- OSStatus MIDIObjectGetStringProperty(MIDIObjectRef obj, CFStringRef propertyID, CFStringRef  _Nullable *str);
-- obj = object whose property is to be returned, propertyID = Name of the property to return, str = on success the value of the property, Returns result code.
private foreign handler c_MIDIObjectGetStringProperty(in pMIDIObjectRef as ObjCId, in rPropertyIDCFStrRef as ObjCId, out rPropertyValCFStrRef as optional ObjCId) returns CSInt binds to "c:CoreMIDI.framework>MIDIObjectGetStringProperty"
-- MIDIObjectGetProperties -- Gets all of an object's properties.
-- OSStatus MIDIObjectGetProperties(MIDIObjectRef obj, CFPropertyListRef  _Nullable *outProperties, Boolean deep);
private foreign handler c_MIDIObjectGetProperties(in pMIDIObjectRef as ObjCId, out rCFPropertyListRef as ObjCId, in pDeep as Boolean) returns CSInt binds to "c:CoreMIDI.framework>MIDIObjectGetProperties"
--CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error); -- CFOptionFlags parameter is currently unused and should be set to 0.
private foreign handler c_CFPropertyListCreateData(in pCFAllocatorRef as optional ObjCId, in pCFPropertyListRef as ObjCId, in pFormat as CInt, in pOptionFlags as CUInt, out rCFErrorRef as optional any) returns ObjCId binds to "c:CFPropertyListCreateData"
-- pFormat kCFPropertyListXMLFormat_v1_0 = 100 or kCFPropertyListBinaryFormat_v1_0 = 200 or kCFPropertyListOpenStepFormat = 1 (discouraged)
----------------------------------------------------------------- Data Buffer ------------------------------------------------------------
private foreign handler objC_NSMutableDataWithLength(in pDataLength as ObjcId) returns ObjcId binds to "objc:NSMutableData.+dataWithLength:" -- Creates and returns an mutable data object containing a given number of zeroed bytes. Toll free bridges to CFMutableDataRef for Foundation C APIs
private foreign handler objC_NSMutableDataWithCapacity(in pDataLength as ObjcId) returns ObjcId binds to "objc:NSMutableData.+dataWithCapacity:"
private foreign handler objC_NSMutableDataBytesPtr(in pMutableDataRef as ObjcId) returns Pointer binds to "objc:NSMutableData.mutableBytes"
private foreign handler objC_NSMutableDataSetData(in pMutableDataRef as ObjcId, in pNSDataToSet as ObjcId) returns nothing binds to "objc:NSMutableData.-setData:"
private foreign handler objC_NSDataBytesPtr(inout pMutableDataRef as ObjcId) returns Pointer binds to "objc:NSData.bytes"
----------------------------------------------------------------- Time Stamping ------------------------------------------------------------
-- https://developer.apple.com/documentation/kernel/1462446-mach_absolute_time?language=objc
-- private foreign handler c_mach_absolute_time() returns MIDITimeStamp binds to "c:Kernel.framework>mach_absolute_time"
private foreign handler c_mach_absolute_time() returns UInt64 binds to "c:mach_absolute_time"
private foreign handler c_mach_timebase_info(inout pTimeBaseInfo as TimeBaseInfo) returns nothing binds to "c:mach_timebase_info"
----------------------------------------------------------------- Constants ------------------------------------------------------------
----------------------------------------------------------------- MIDIObjectTypes Constants ------------------------------------------------------------
constant kMIDIObjectType_ExternalDestination is 0x10
constant kMIDIObjectType_ExternalSource is 0x10
constant kMIDIObjectType_ExternalEntity is 0x10
constant kMIDIObjectType_ExternalDevice is 0x10
constant kMIDIObjectType_Destination is 3
constant kMIDIObjectType_Source is 2
constant kMIDIObjectType_Entity is 1
constant kMIDIObjectType_Device is 0
constant kMIDIObjectType_Other is -1
----------------------------------------------------------------- Variables ------------------------------------------------------------
private variable sMIDIClientRef as ObjcId
private variable sMIDIOutPortRef as ObjcId
private variable sMIDIInputPortRef as ObjcId
private variable sMIDIDestEndpointRef as ObjcId
private variable sMIDISourceEndpointRef as ObjcId
private variable sMIDIPacketPtr as Pointer
private variable sMIDIPacketListPtr as Pointer
private variable sMIDIPacketByteBufferNSMutableDataRef as ObjcId
private variable sMIDIPacketByteBufferPtr as Pointer

/**
Sends arbitrary bytes to the MIDI Client.

Example:
CoreMIDISendMIDIbytesNow(pMIDIMsgData)

Parameters:
pMIDIMsgData (Data): arbitrary bytes, does not check for the bytes for validity as MIDI messages

Description:
Sends arbitrary bytes to the MIDI Client immediately (as fast as possible).
A MIDI Client must be created first using CoreMIDIClientCreate.
*/
public handler CoreMIDISendMIDIbytesNow (in pMIDIMsgData as Data) returns nothing
   variable tOSStatus as optional CSInt
   variable tTimeStamp as MIDITimeStamp
   variable tMIDIPacket as MIDIPacket
   variable tMIDIPacketList as MIDIPacketList
   variable tBufferSize  as Number
   variable tCnt as Number
   variable tMIDIMsgBytesNSDataRef as ObjCId
   variable tMIDIMsgBytesPtr as Pointer
   put the number of bytes in pMIDIMsgData into tCnt
   put 256 into tBufferSize
   put 0 into tTimeStamp
   unsafe
      put objC_NSMutableDataWithLength(NumberToNSNumber(tBufferSize)) into sMIDIPacketByteBufferNSMutableDataRef
      put objC_NSMutableDataBytesPtr(sMIDIPacketByteBufferNSMutableDataRef) into sMIDIPacketByteBufferPtr

      put c_MIDIPacketListInit(sMIDIPacketByteBufferPtr) into sMIDIPacketPtr

      put objC_NSMutableDataWithLength(NumberToNSNumber(tCnt)) into tMIDIMsgBytesNSDataRef
      objC_NSMutableDataSetData(tMIDIMsgBytesNSDataRef, DataToNSData(pMIDIMsgData))
      put objC_NSMutableDataBytesPtr(tMIDIMsgBytesNSDataRef) into tMIDIMsgBytesPtr

      put c_MIDIPacketListAdd(sMIDIPacketByteBufferPtr,tBufferSize,sMIDIPacketPtr,tTimeStamp,tCnt,tMIDIMsgBytesPtr) into sMIDIPacketPtr
      put c_MIDIReceived(sMIDISourceEndpointRef,sMIDIPacketByteBufferPtr) into tOSStatus
   end unsafe
end handler

/**
Sends arbitrary bytes to the MIDI Client's Queue in millisecond Offsets from now.

Example:
CoreMIDISendMIDIbytesInTime(0,pMIDIMsgData) -- sends pMIDIMsgData immediately
CoreMIDISendMIDIbytesInTime(1000,pMIDIMsgData) -- sends pMIDIMsgData in 1 second

Parameters:
pTimeOffsetMillisecs (Integer): the millesecond offset from now to hold in queue
pMIDIMsgData (Data): arbitrary bytes, does not check for the bytes for validity as MIDI messages

Description:
Sends arbitrary bytes to the MIDI Client's Queue in millisecond Offsets from now.
A MIDI Client must be created first using CoreMIDIClientCreate.
*/
public handler CoreMIDISendMIDIbytesInTime(in pTimeOffsetMillisecs as optional Number, in pMIDIMsgData as Data) returns nothing
   variable tOSStatus as optional CSInt
   variable tAbsoluteTime as UInt64
   variable tTBnumerator as UInt32
   variable tTBdenominator as UInt32
   variable tTimeStamp as MIDITimeStamp
   variable tTimeBaseInfoRef as ObjCId
   variable tTimeBaseInfoPtr as Pointer
   variable tTimebaseInfo as TimeBaseInfo
   variable tMIDIPacket as MIDIPacket
   variable tMIDIPacketList as MIDIPacketList
   variable tBufferSize  as Number
   variable tCnt as Number
   variable tMIDIMsgBytesNSDataRef as ObjCId
   variable tMIDIMsgBytesPtr as Pointer
   put the number of bytes in pMIDIMsgData into tCnt
   put 256 into tBufferSize
   put [0,0] into tTimeBaseInfo
   unsafe
      -- put objC_NSMutableDataWithLength(NumberToNSNumber(8)) into tTimeBaseInfoRef
      -- put objC_NSMutableDataBytesPtr(tTimeBaseInfoRef) into tTimeBaseInfoPtr
      put c_mach_absolute_time() into tAbsoluteTime
      c_mach_timebase_info(tTimeBaseInfo) -- into tTimeBaseInfo
      put element 1 of tTimeBaseInfo into tTBnumerator
      put element 2 of tTimeBaseInfo into tTBdenominator
      put tAbsoluteTime * tTBnumerator / tTBdenominator into tTimeStamp
      -- log tTimeStamp
      put tTimeStamp + (pTimeOffsetMillisecs * 1000000) into tTimeStamp

      put objC_NSMutableDataWithLength(NumberToNSNumber(tBufferSize)) into sMIDIPacketByteBufferNSMutableDataRef
      put objC_NSMutableDataBytesPtr(sMIDIPacketByteBufferNSMutableDataRef) into sMIDIPacketByteBufferPtr

      put c_MIDIPacketListInit(sMIDIPacketByteBufferPtr) into sMIDIPacketPtr

      put objC_NSMutableDataWithLength(NumberToNSNumber(tCnt)) into tMIDIMsgBytesNSDataRef
      objC_NSMutableDataSetData(tMIDIMsgBytesNSDataRef, DataToNSData(pMIDIMsgData))
      put objC_NSMutableDataBytesPtr(tMIDIMsgBytesNSDataRef) into tMIDIMsgBytesPtr

      put c_MIDIPacketListAdd(sMIDIPacketByteBufferPtr,tBufferSize,sMIDIPacketPtr,tTimeStamp,tCnt,tMIDIMsgBytesPtr) into sMIDIPacketPtr
      put c_MIDIReceived(sMIDISourceEndpointRef,sMIDIPacketByteBufferPtr) into tOSStatus
   end unsafe
end handler

/**
Creates a MIDI Client and asigns it a name.

Example:
CoreMIDIClientCreate("My LiveCode CoreMIDI Client")

Parameters:
clientName (String): The text string to use as the MIDI Client's name

Description:
Creates a MIDI Client named with string provided (client name is not generally visible to other applications)
*/
public handler CoreMIDIClientCreate(in clientName as String) returns nothing
   variable tClientNameStrRef as ObjcObject
   variable tOSStatus as optional CSInt
   variable tMIDINotifyProc as optional any
   variable tNotifyRefCon as optional any
   variable tBlockPtr as Pointer
   variable tBlockDescriptionPointer as Pointer
   unsafe
     CreateSetupChangedFunctionBlock(CoreMIDISetupChangedCallbackProc, tBlockPtr, tBlockDescriptionPointer)
     -- objC_AVMIDIPlayerPlay(mAVMIDIPlayerInstance, tBlockPtr)
     --objC_AVMIDIPlayerPlay(mAVMIDIPlayerInstance, tAVMIDIPlayerCompletionHandler)

       -- CreateFunctionBlock(CoreMIDIReceiverCallbackProc, tBlockPtr, tBlockDescriptionPointer)
       put StringToNSString(clientName) into tClientNameStrRef

         -- put c_MIDIClientCreate(tClientNameStrRef,tBlockPtr,nothing,sMIDIClientRef) into tOSStatus

       put c_MIDIClientCreate(tClientNameStrRef,nothing,nothing,sMIDIClientRef) into tOSStatus
       -- log sMIDIClientRef
       -- log tOSStatus
   end unsafe
end handler

/**
Creates a Virtual MIDI Source with the given name.

Example:
CoreMIDISourceCreate("MIDI Output from my LiveCode Stack")

Parameters:
sourceName (String): The name to use for the MIDI source
uniqueIDnum (Integer): A number to use as the unique ID number for your source, if an
empty value is passed an ID number will be generated by the system.
Description:
Creates a Virtual MIDI Source with the given name.
The name will appear as a source of MIDI data in other applications (such as GarageBand or LogicPro)
*/
public handler CoreMIDISourceCreate(in sourceName as String,in uniqueIDnum as optional SInt32) returns Number -- Data
   variable tSourceNameStrRef as ObjcObject
   variable tOSStatus as optional CSInt
   variable tCFError as optional ObjCId
   variable tPropertyValSInt32 as optional SInt32
		unsafe
			put StringToNSString(sourceName) into tSourceNameStrRef
         put c_MIDISourceCreate(sMIDIClientRef,tSourceNameStrRef,sMIDISourceEndpointRef) into tOSStatus
         if uniqueIDnum is not nothing then
               put c_MIDIObjectSetIntegerProperty(sMIDISourceEndpointRef,StringToNSString("uniqueID"),uniqueIDnum) into tOSStatus
         end if
         put c_MIDIObjectGetIntegerProperty(sMIDISourceEndpointRef,StringToNSString("uniqueID"),tPropertyValSInt32) into tOSStatus
         if tPropertyValSInt32 is not nothing then
            return tPropertyValSInt32
         end if
   end unsafe
end handler

/**
Given the unique ID number of an object in the current MIDI setup returns the object's type.

Example:
CoreMIDIObjectTypeFromID( uniqueIDnum )

Parameters:
uniqueIDnum (Integer): Unique ID number of an object in the current MIDI setup

Description:
Given the unique ID number of an object in the current MIDI setup returns the object's type.
(Source, Destination, Extenal Device, etc.)
*/
public handler CoreMIDIObjectTypeFromID(in uniqueIDnum as optional SInt32) returns String
   variable tOSStatus as optional CSInt
   variable rMIDIObjectRef as optional ObjCId
   variable rMIDIObjectType as optional Number
   variable rReturnString as String
   unsafe
   -- OSStatus = MIDIObjectFindByUniqueID(MIDIUniqueID inUniqueID, MIDIObjectRef *outObject, MIDIObjectType *outObjectType);
   -- inUniqueID of object to search for (This should be the result of an earlier call to MIDIObjectGetIntegerProperty "UniqueID")
   -- outObject returned object, or NULL if the object was not found or an error occurred. This should be cast to the appropriate type (MIDIDeviceRef, MIDIEntityRef, MIDIEndpointRef), according to *outObjectType.
   -- outObjectType on exit, the type of object which was found; undefined if none found.
   -- Return Value is sn OSStatus error code, including kMIDIObjectNotFound if there is no object with the specified uniqueID.
      put c_MIDIObjectFindByUniqueID( uniqueIDnum, rMIDIObjectRef, rMIDIObjectType) into tOSStatus -- rMIDIObjectType is an SInt32
       if rMIDIObjectType is nothing then
         put "MIDI Object not found" into rReturnString
       end if
       if rMIDIObjectType > 3 then
         put "External Object, Mask=" & rMIDIObjectType formatted as string into rReturnString -- all external object constants are defined as 0x10
       end if
       if rMIDIObjectType = kMIDIObjectType_Destination then
          put "Destination Object" into rReturnString ---  kMIDIObjectType_Destination = 3
       end if
       if rMIDIObjectType = kMIDIObjectType_Source then
          put "Source Object" into rReturnString ---  kMIDIObjectType_Source = 2
       end if
       if rMIDIObjectType = kMIDIObjectType_Entity then
          put "Entity Object" into rReturnString ---  kMIDIObjectType_Entity = 1
       end if
       if rMIDIObjectType = kMIDIObjectType_Device then
          put "Device Object" into rReturnString ---  kMIDIObjectType_Device =
       end if
       if rMIDIObjectType = kMIDIObjectType_Other then
          put "Other Type Object" into rReturnString --- kMIDIObjectType_Other = -1
       end if
   end unsafe
   return rReturnString
end handler

/**
Returns a count of MIDI Destinations in the MIDI Setup that are currently available.

Example:
put CoreMIDIMIDIGetNumberOfDestinations() into tDestinationsCount

Description:
Returns a count of MIDI Destinations in the MIDI Setup that are currently available.
Destinations in the setup that are powered off or not connected will not be included in the count.
*/
public handler CoreMIDIMIDIGetNumberOfDestinations() returns Number
   variable rSourceCnt as Number
	unsafe
			put c_MIDIGetNumberOfDestinations() into rSourceCnt
   end unsafe
   return rSourceCnt
end handler

/**
Given an index number of a MIDI Destination returns Text of it's XML/Plist Data

Example:
put CoreMIDIGetDestinationInfo(1) into fld "Destination Plist Info" -- info for the 1st detination found

Parameters:
pIndex (Integer): Index number of a destination in the currently available to CoreMIDI.

Description:
Given an index number of a MIDI Destination returns Text of it's XML/Plist Data
*/
public handler CoreMIDIGetDestinationInfo(in pIndex as UInt32) returns Data
   variable tDestinationRef as ObjcId
   variable tOSStatus as optional CSInt
   variable tCFError as optional ObjCId
   variable tCFPropertyListRef as ObjCId
   variable tCFPropertyListDataRef as ObjCId
   variable tCFPropertyListData as Data
	unsafe
			put c_MIDIGetDestination(pIndex -1) into tDestinationRef
         put c_MIDIObjectGetProperties(tDestinationRef,tCFPropertyListRef,true) into tOSStatus
         put c_CFPropertyListCreateData(nothing, tCFPropertyListRef, 100, 0, tCFError) into tCFPropertyListDataRef
         put DataFromNSData(tCFPropertyListDataRef) into tCFPropertyListData
   end unsafe
   return tCFPropertyListData
end handler

/**
Given an index number of a MIDI Destination returns Display Name and Unique ID Number.

Example:
put CoreMIDIGetDestinationNameAndID(1) into line 1 of button "Destinations"

Parameters:
pIndex (Integer): Index number of a destination in the currently available to CoreMIDI.

Description:
Given an index number of a MIDI Destination returns Display Name and Unique ID Number seperated by a comma.
*/
public handler CoreMIDIGetDestinationNameAndID(in pIndex as UInt32) returns String
   variable tDestinationRef as ObjcId
   variable tOSStatus as optional CSInt
   variable tCFError as optional ObjCId
   variable tPropertyValCFStrRef as optional ObjCId
   variable tPropertyValCFStr as optional String
   variable tPropertyValSInt32 as optional SInt32
   unsafe
      put c_MIDIGetDestination(pIndex -1) into tDestinationRef
         put c_MIDIObjectGetStringProperty(tDestinationRef,StringToNSString("displayName"),tPropertyValCFStrRef) into tOSStatus -- "displayName" gets Entity Name & the Endpoint's Name
         -- put c_MIDIObjectGetStringProperty(tDestinationRef,StringToNSString("name"),tPropertyValCFStrRef) into tOSStatus -- "name" just gets the EndPoint's name
         if tPropertyValCFStrRef is not nothing then
            put StringFromNSString(tPropertyValCFStrRef) into tPropertyValCFStr
         end if
         put c_MIDIObjectGetIntegerProperty(tDestinationRef,StringToNSString("uniqueID"),tPropertyValSInt32) into tOSStatus
      end unsafe
   return tPropertyValCFStr &  "," & tPropertyValSInt32 formatted as string
end handler

/**
Returns a count of MIDI Sources in the MIDI Setup that are currently available.

Example:
put CoreMIDIMIDIGetNumberOfSources() into tDestinationsCount

Description:
Returns a count of MIDI Sources in the MIDI Setup that are currently available.
Destinations in the setup that are powered off or not connected will not be included in the count.
*/
public handler CoreMIDIMIDIGetNumberOfSources() returns Number
   variable rSourceCnt as Number
	unsafe
			put c_MIDIGetNumberOfSources() into rSourceCnt
   end unsafe
   return rSourceCnt
end handler

/**
Given an index number of a MIDI Source returns Text of it's XML/Plist Data.

Example:
put CoreMIDIGetSourceInfo(1) into fld "Source Plist Info" -- info for the 1st detination found

Parameters:
pIndex (Integer): Index number of a source currently available to CoreMIDI.

Description:
Given an index number of a MIDI Source returns text of it's XML/Plist Data.
*/
public handler CoreMIDIGetSourceInfo(in pIndex as UInt32) returns Data
   variable tSourceRef as optional ObjcId
   variable tOSStatus as optional CSInt
   variable tCFError as optional ObjCId
   variable tCFPropertyListRef as ObjCId
   variable tCFPropertyListDataRef as ObjCId
   variable tCFPropertyListData as Data
	unsafe
		put c_MIDIGetSource(pIndex-1) into tSourceRef
      put c_MIDIObjectGetProperties(tSourceRef,tCFPropertyListRef,true) into tOSStatus
      put c_CFPropertyListCreateData(nothing, tCFPropertyListRef, 100, 0, tCFError) into tCFPropertyListDataRef
      put DataFromNSData(tCFPropertyListDataRef) into tCFPropertyListData
   end unsafe
   return tCFPropertyListData
end handler

/**
Given an index number of a MIDI Source returns Display Name and Unique ID Number.

Example:
put CoreMIDIGetSourceNameAndID(1) into line 1 of button "Sources"

Parameters:
pIndex (Integer): Index number of a source currently available to CoreMIDI.

Description:
Given an index number of a MIDI Source returns Display Name and Unique ID Number seperated by a comma.
*/
public handler CoreMIDIGetSourceNameAndID(in pIndex as UInt32) returns String
   variable tSourceRef as optional ObjcId
   variable tOSStatus as optional CSInt
   variable tCFError as optional ObjCId
   variable tPropertyValCFStrRef as optional ObjCId
   variable tPropertyValCFStr as optional String
   variable tPropertyValSInt32 as optional Number
   unsafe
         put c_MIDIGetSource(pIndex-1) into tSourceRef
         put c_MIDIObjectGetStringProperty(tSourceRef,StringToNSString("displayName"),tPropertyValCFStrRef) into tOSStatus
         -- put c_MIDIObjectGetStringProperty(tSourceRef,StringToNSString("name"),tPropertyValCFStrRef) into tOSStatus
         if tPropertyValCFStrRef is not nothing then
            put StringFromNSString(tPropertyValCFStrRef) into tPropertyValCFStr
            -- log tPropertyValCFStr
         end if
         put c_MIDIObjectGetIntegerProperty(tSourceRef,StringToNSString("uniqueID"),tPropertyValSInt32) into tOSStatus
         -- if tPropertyValSInt32 is not nothing then
            -- log tPropertyValSInt32
         -- end if
   end unsafe
   return tPropertyValCFStr &  "," & tPropertyValSInt32 formatted as string
end handler

/**
Selects the MIDI Source of the corrisponding unique ID as the data output source.

Example:
 CoreMIDISelectSourceByID(uniqueIDnum)

Description:
Given an index number of a MIDI Source returns Display Name and Unique ID Number seperated by a comma.
*/
public handler CoreMIDISelectSourceByID(in uniqueIDnum as optional SInt32) returns String
   variable tOSStatus as optional CSInt
   variable rMIDIObjectRef as optional ObjCId
   variable rMIDIObjectType as optional Number
   variable rReturnString as String
   unsafe
      put c_MIDIObjectFindByUniqueID( uniqueIDnum, rMIDIObjectRef, rMIDIObjectType) into tOSStatus -- rMIDIObjectType is an SInt32
      -- if rMIDIObjectRef is not nothing then
      --    put rMIDIObjectRef into sMIDISourceEndpointRef
      -- end if
         if rMIDIObjectType is kMIDIObjectType_Source then
             put rMIDIObjectRef into sMIDISourceEndpointRef
         else
            put "No Source Object Found" into rReturnString
       end if
   end unsafe
   return rReturnString
end handler

public handler CoreMIDISelectSourceByIndex(in pIndex as UInt32) returns String
   variable tSourceRef as optional ObjCId
   variable tOSStatus as optional CSInt
   variable tPropertyValSInt32 as optional Number
   unsafe
      put c_MIDIGetSource(pIndex-1) into tSourceRef
      if tSourceRef is not nothing then
         put c_MIDIObjectGetIntegerProperty(tSourceRef,StringToNSString("uniqueID"),tPropertyValSInt32) into tOSStatus
         if tOSStatus is 0 then
            return tPropertyValSInt32 formatted as string
            put tSourceRef into sMIDISourceEndpointRef
         else
            return "Error " & tOSStatus formatted as string
         end if
      end if
   end unsafe
end handler

public handler CoreMIDISelectSourceByIndexAlt(in pIndex as UInt32) returns String
   variable tSourceRef as optional ObjCId
   variable tOSStatus as optional CSInt
   variable tPropertyValSInt32 as optional Number
   variable rMIDIObjectType as optional Number
   unsafe
      put c_MIDIGetSource(pIndex-1) into tSourceRef
      put c_MIDIObjectGetIntegerProperty(tSourceRef,StringToNSString("uniqueID"),tPropertyValSInt32) into tOSStatus
      if tOSStatus is 0 then
        put c_MIDIObjectFindByUniqueID( tPropertyValSInt32, sMIDISourceEndpointRef, rMIDIObjectType) into tOSStatus -- rMIDIObjectType is an SInt32
        return tPropertyValSInt32 formatted as string
      else
        return "Error " & tOSStatus formatted as string
      end if
   end unsafe
end handler

public handler CoreMIDIGetNumberOfDevices() returns Number
   variable rSourceCnt as Number
	unsafe
			put c_MIDIGetNumberOfDevices() into rSourceCnt
   end unsafe
   return rSourceCnt
end handler

public handler CoreMIDIGetDeviceInfo(in pIndex as UInt32) returns Data
   variable tDeviceRef as ObjcId
   variable tOSStatus as optional CSInt
   variable tCFError as optional ObjCId
   variable tPropertyValCFStrRef as optional ObjCId
   variable tPropertyValCFStr as optional String
   variable tPropertyValSInt32 as optional Number
   variable tCFPropertyListRef as ObjCId
   variable tCFPropertyListDataRef as ObjCId
   variable tCFPropertyListData as Data
	unsafe
			put c_MIDIGetDevice(pIndex -1) into tDeviceRef
         -- put c_MIDIObjectGetStringProperty(tDeviceRef,StringToNSString("displayName"),tPropertyValCFStrRef) into tOSStatus
         put c_MIDIObjectGetStringProperty(tDeviceRef,StringToNSString("name"),tPropertyValCFStrRef) into tOSStatus
         if tPropertyValCFStrRef is not nothing then
            put StringFromNSString(tPropertyValCFStrRef) into tPropertyValCFStr
            -- log tPropertyValCFStrRef
            -- log tPropertyValCFStr
         end if
         put c_MIDIObjectGetIntegerProperty(tDeviceRef,StringToNSString("uniqueID"),tPropertyValSInt32) into tOSStatus
         if tPropertyValSInt32 is not nothing then
            -- put NumberFromNSNumber(tPropertyValCFStrRef) into tPropertyValCFStr
            -- log tPropertyValCFStrRef
            -- log tPropertyValSInt32
         end if
         put c_MIDIObjectGetProperties(tDeviceRef,tCFPropertyListRef,true) into tOSStatus
         put c_CFPropertyListCreateData(nothing, tCFPropertyListRef, 100, 0, tCFError) into tCFPropertyListDataRef
         put DataFromNSData(tCFPropertyListDataRef) into tCFPropertyListData
   end unsafe
   -- put tPropertyValSInt32 before tCFPropertyListData
   -- put StringFromNSString(tPropertyValCFStr) before tCFPropertyListData
   return tCFPropertyListData
end handler

public handler CoreMIDIGetNumberOfExternalDevices() returns Number
   variable rSourceCnt as Number
	unsafe
			put c_MIDIGetNumberOfExternalDevices() into rSourceCnt
   end unsafe
   return rSourceCnt
end handler

public handler CoreMIDIGetExternalDeviceInfo(in pIndex as UInt32) returns Data
   variable tDeviceRef as ObjcId
   variable tExternalDeviceRef as ObjcId
   variable tOSStatus as optional CSInt
   variable tCFError as optional ObjCId
   variable tCFPropertyListRef as ObjCId
   variable tCFPropertyListDataRef as ObjCId
   variable tCFPropertyListData as Data
	unsafe
			put c_MIDIGetDevice(pIndex -1) into tDeviceRef
         put c_MIDIObjectGetProperties(tExternalDeviceRef,tCFPropertyListRef,true) into tOSStatus
         put c_CFPropertyListCreateData(nothing, tCFPropertyListRef, 100, 0, tCFError) into tCFPropertyListDataRef
         put DataFromNSData(tCFPropertyListDataRef) into tCFPropertyListData
   end unsafe
   return tCFPropertyListData
end handler

public handler CoreMIDIDeviceGetNumberOfEntities(in pDevIndex as UInt32) returns Number
   variable tDeviceRef as ObjcId
   variable tDeviceEntityCount as CInt
   variable tOSStatus as optional CSInt
   variable rDeviceEntityCnt as UInt32
   unsafe
      put c_MIDIGetDevice(pDevIndex -1) into tDeviceRef
      put c_MIDIDeviceGetNumberOfEntities(tDeviceRef) into rDeviceEntityCnt
   end unsafe
   return rDeviceEntityCnt
end handler

public handler CoreMIDIGetDeviceEntityInfo(in pDevIndex as UInt32, in pEntityIndex as UInt32) returns Data -- Number
   variable tDeviceRef as ObjcId
   variable tDeviceEntityRef as ObjcId

   variable tOSStatus as optional CSInt
   variable tCFError as optional ObjCId
   variable tCFPropertyListRef as ObjCId
   variable tCFPropertyListDataRef as ObjCId
   variable tCFPropertyListData as Data
   variable rData as Data
	unsafe
			put c_MIDIGetDevice(pDevIndex -1) into tDeviceRef
         put c_MIDIDeviceGetEntity(tDeviceRef, pEntityIndex -1) into tDeviceEntityRef
         put c_MIDIObjectGetProperties(tDeviceEntityRef,tCFPropertyListRef,true) into tOSStatus
         put c_CFPropertyListCreateData(nothing, tCFPropertyListRef, 100, 0, tCFError) into tCFPropertyListDataRef
         put DataFromNSData(tCFPropertyListDataRef) into tCFPropertyListData
   end unsafe
   return tCFPropertyListData
end handler

public handler CoreMIDIRestart()
   unsafe
      c_MIDIRestart()
   end unsafe
end handler

public handler CoreMIDIFlushOutput()
   unsafe
      c_MIDIFlushOutput(sMIDISourceEndpointRef)
   end unsafe
end handler

public handler CoreMIDIInit(in pClientName as String) returns Data
   variable tOSStatus as optional CSInt
   variable tCFError as optional ObjCId
   variable tCFPropertyListRef as ObjCId
   variable tCFPropertyListDataRef as ObjCId
   variable tCFPropertyListData as Data

   unsafe
      CoreMIDIClientCreate(pClientName)
      put c_MIDIObjectGetProperties(sMIDIClientRef,tCFPropertyListRef,true) into tOSStatus
      -- put c_CFPropertyListCreateXMLData(nothing, tCFPropertyListRef) into tCFPropertyListDataRef <--- *** per Apple CFPropertyListCreateXMLData is DEPRECATED - don't use.
      put c_CFPropertyListCreateData(nothing, tCFPropertyListRef, 100, 0, tCFError) into tCFPropertyListDataRef
      put DataFromNSData(tCFPropertyListDataRef) into tCFPropertyListData
   end unsafe
   return tCFPropertyListData
end handler

public handler CoreMIDIDestroy() returns nothing
   variable tOSStatus as optional CSInt
   unsafe
      put c_MIDIClientDispose(sMIDIClientRef) into tOSStatus
   end unsafe
end handler

end library
