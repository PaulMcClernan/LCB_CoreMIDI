library community.appledlssynth.paulmcclernan

use com.livecode.engine
use com.livecode.foreign
use com.livecode.objc
use com.livecode.array
use com.livecode.list
use com.livecode.byte
use com.livecode.date
use com.livecode.binary
use com.livecode.bitwise
use com.livecode.string

metadata version is "0.0.1"
metadata author is "Paul McClernan"
metadata title is "AppleDLSSynth library"
metadata svgicon is "M66.43,52.07c-0.71,0.32-1.48,0.56-2.31,0.78c-2.35,0.65-5.44,0.04-5.44,0.04l-8.52,9.56c0,0,11.03,11.58,13.36,13.92 s4.02,6.19,4.02,6.19l8.77-19.76C76.31,62.8,67.18,58.92,66.43,52.07z M56.35,86.86c-2.83-2.4-16.4-15.09-16.4-15.09L21.22,90.12c0,0,3.25,1.93,5.41,1.86c5.6-0.17,10.48-3.77,15.46-3.77 c4.58,0,8.99,3.52,15.56,3.77c1.55,0.06,2.88-0.35,4.41-1.24c0.7-0.41,2.02-1.54,2.02-1.54S59.18,89.26,56.35,86.86z M52.45,18.42c5.85-5.85,5.42-15.63,5.42-15.63s-8.65,0.97-13.34,6.82c-5.22,6.51-5.07,13.39-4.94,14.51 C44.49,24.13,48.71,22.16,52.45,18.42z M18.38,48.03c-3.59,0.27-3.23,4.28-3.21,4.45l0.03,0.32l-0.23,0.23l-5.54,5.89l-5.85-5.95l8.91,24.95l18.58-18.16l-8.8-9.83 C22.28,49.93,19.79,47.92,18.38,48.03z M9.98,39.65c0,0,1.4-2.6,5.19-5.27c2.15-1.51,4.69-2.88,7.45-3.52c1.75-0.41,3.72-0.62,5.86-0.62 c3.63,0,9.12,1.35,9.12,1.35l-10.85,4.24c-1.77,0.8-2.58,2.62-2.85,3.38l14.4,13.75c3.71-3.62,6.78-6.15,9.99-9.57 c-0.51-4.23,0.89-8.11,3.22-10.81c4.73-5.48,13.47-2.78,13.47-2.78l-3.55,3.05c0,0-4.13,3.16-3.01,6.79 c0.27,0.87,0.84,2.34,2.44,3.17c0.93,0.48,4.09,0.37,5.6-0.95C68.48,40.1,70.45,38,70.45,38s0.88-1.54,1.8-2.43 c1.11-1.08,3.56-2.91,3.56-2.91s-4.82-5.38-8.14-6.83c-2.91-1.27-6.15-1.89-9.71-1.91c-7.4-0.03-12.83,4.65-16.7,4.35 c-3.19-0.25-9.47-4.38-14.6-4.35c-7.22,0.05-13.04,2.44-17.47,7.33C5.44,35.37,4,45.11,4,45.11l1.89-1.93c0,0,2.98-0.11,3.34-0.41 c1.48-1.24,1.31-2.33,1.31-2.33L9.98,39.65z M18.15,46.11c1.68-0.19,4.88,2.09,4.88,2.09l9.22,10.03l4.11-3.86L21.75,39.42l0.13-0.52c0.03-0.14,0.88-3.49,3.9-4.84 l5.18-2.02c-1.95-0.07-5.6-0.11-7.97,0.42c-3.26,0.74-8.73,4.32-10.78,7.04c0.06,0.17,0.09,0.34,0.1,0.53 c0.08,1.49-1.41,3.45-2.02,3.98c-0.73,0.63-2.55,1.03-3.63,1.21l-3.94,3.94l6.59,6.6l3.85-3.86c-0.04-1.6,0.45-3.4,1.78-4.57 C15.67,46.71,16.48,46.3,18.15,46.11z M70.95,39.93c-0.62,0.44-4.18,6.07-9.58,4.98c-2.9-0.58-4.65-3.5-4.92-5.3c-0.6-4.07,1.8-6.16,3.56-7.69 c0.59-0.52,1.6-1.31,1.6-1.31s-6.16-0.73-9.16,3.5c-3.98,5.61-1.98,9.83-1.98,9.83S13.22,80.66,12.03,81.82 c-0.09,0.56-0.5,3.71,0.93,5.31c1.56,1.74,3.06,2.79,5.34,2.24c1.3-0.32,39.44-38.44,39.44-38.44s3.65,0.56,5.67,0.07 C68.3,49.8,70.71,46.32,70.95,39.93z M65.52,84.81c-0.14,0.85-0.52,1.48-1.2,1.99c-0.5,0.41-1.12,0.62-1.88,0.62c-2.8,0-6.23-3.51-6.24-3.52L41.82,70.25 l6.44-6.55c0,0,13.44,13.7,14.11,14.36C63.03,78.73,65.79,83.22,65.52,84.81z"

public foreign type MIDIPacket binds to "MCAggregateTypeInfo:kihhh" --k=UInt64  i=UInt16 h=3 x UInt8
 -- MIDIPacketList init(numPackets:packet:)
public foreign type MIDIMsg binds to "MCAggregateTypeInfo:hhh" -- h=3 x UInt8
public foreign type MIDIPacketList binds to "MCAggregateTypeInfo:jr"
 -- Declaration (numPackets: UInt32, *packet(MIDIPacket)) -- j = UInt32
public type MIDITimeStamp is UInt64
---------------------------------------------------------------------------------------------------------------------------

--Here are the steps to build an Audio Unit Graph.
--	1	Instantiate an AUGraph with the function NewAUGraph.
--	2	Instantiate one or more AUNodes, each of which represents one audio unit in the graph. To create and add the nodes to the graph, use the function AUGraphAddNode.
--	3	You first create an AudioComponentDescription to pass into this function.
--	4	Open the graph and instantiate the audio units with the function AUGraphOpen.
--	5	Obtain references to the audio units with the function AUGraphNodeInfo.

--// This is a simple test case of making an simple graph with a DLSSynth, Limiter and Ouput unit
--// we're going to use a graph because its easier for it to just handle the setup and connections, etc...

--#include <AudioUnit/AudioUnit.h>
--#include <AudioToolbox/AudioToolbox.h> //for AUGraph

-- typedef struct AudioComponentDescription Create sampler :
-- OSType is alias of type UInt32 (4 byte char code)
-- OSType componentType -- kAudioUnitType_MusicDevice = aumu (1970107745 for UInt32 value)-- unique 4-byte code identifying the interface for the component
-- OSType componentSubType -- kAudioUnitSubType_Sampler = samp (1886216563) -- 4char code you can use to indicate the purpose of a component. Example, you could use lpas or lowp as a mnemonic indication that an audio unit is a low-pass filter.
-- OSType componentManufacturer -- kAudioUnitManufacturer_Apple = appl (1819308129)-- 4char code of unique vendor ID registered with Apple
-- UInt32 componentFlags 0 -- Set this value to zero.
-- UInt32 componentFlagsMask 0 -- Set this value to zero

-- typedef struct AudioComponentDescription Create IO node :
-- OSType is alias of type UInt32 (4 byte/ASCII char code)
-- OSType componentType -- kAudioUnitType_Output = auou (1970238817)-- unique 4-byte code identifying the interface for the component
-- OSType componentSubType -- kAudioUnitSubType_RemoteIO = rioc (1668245874)-- 4char code you can use to indicate the purpose of a component. Example, you could use lpas or lowp as a mnemonic indication that an audio unit is a low-pass filter.
-- OSType componentManufacturer -- kAudioUnitManufacturer_Apple = appl (1819308129) -- 4char code of unique vendor ID registered with Apple
-- UInt32 componentFlags 0 -- Set this value to zero.
-- UInt32 componentFlagsMask 0 -- Set this value to zero


private foreign handler objC_NSURLURLWithString(in pURLString as ObjcId) returns ObjcId binds to "objc:NSURL.+URLWithString:"
private foreign handler objC_NSURLfileOrDirURLWithPath(in pPathString as ObjcId, in pIsDir as CBool) returns ObjcId binds to "objc:.NSURL.+fileURLWithPath:isDirectory:"
private foreign handler objC_NSURLfileURLWithPath(in pPathString as ObjcId) returns ObjcId binds to "objc:NSURL.+fileURLWithPath:"

private foreign handler objC_NSErrorAlloc() returns ObjcRetainedId binds to "objc:NSError.+alloc"

public foreign type AudioComponentDescription binds to "MCAggregateTypeInfo:jjjjj" -- 5x OSType/UInt32s
-- public foreign type AudioComponentDescription binds to "MCAggregateTypeInfo:jjj" -- 3x OSType/UInt32s

-- AVAudioUnitMIDIInstrument - (instancetype)initWithAudioComponentDescription:(AudioComponentDescription)description;

private foreign handler objC_AVAudioUnitMIDIInstrument(in pAudioComponentDescr as ObjcId) returns optional any binds to "objc:AVAudioUnitMIDIInstrument.-initWithAudioComponentDescription:"

-- OSStatus AUGraphNodeInfo(AUGraph inGraph, AUNode inNode, AudioComponentDescription *outDescription, AudioUnit  _Nullable *outAudioUnit);

-- OSStatus NewAUGraph ( AUGraph *outGraph ); bind to AudioToolbox.framework
private foreign handler c_NewAUGraph(out rAUGraph as ObjcId) returns CSInt binds to "c:AudioToolbox.framework>NewAUGraph"
--OSStatus AUGraphAddNode(AUGraph inGraph, const AudioComponentDescription *inDescription, AUNode *outNode);
private foreign handler c_AUGraphAddNode(inout pAUGraph as ObjcId, in pAudioComponentDescr as ObjcId, out rAUNode as Int32) returns CSInt binds to "c:AudioToolbox.framework>AUGraphAddNode"
-- CRASH:   0   com.apple.audio.toolbox.AudioToolbox	0x00007fff946fff32 AUGraphNewNode_Imp(OpaqueAUGraph*, AudioComponentDescription const*, unsigned int, void const*, int*) + 222
constant kAudioUnitType_MusicDevice is 1970107745
constant kAudioUnitSubType_Sampler is 1886216563
constant kAudioUnitSubType_DLSSynth is 544435300
constant kAudioUnitSubType_MIDISynth is 1853453165
constant kAudioUnitManufacturer_Apple is 1819308129
constant kAudioUnitType_Output is 1970238817
constant kAudioUnitSubType_RemoteIO is 1668245874

private variable sAVAUMIDIInstrument as optional ObjcId
private variable sAUGraph as optional ObjcId
private variable sSynthNode as optional Int32
private variable sOutputNode as optional Int32

public handler AVAudioCreateDLSSynth() returns nothing
   variable tOSStatus as CSInt
   variable tAudioComponentDescr as List -- AudioComponentDescription
   variable tAudioComponentDescrPtr as ObjcId

   variable tACType as UInt32
   variable tACSubType as UInt32
   variable tACManufacturer as UInt32

   variable tUInt32Zed as UInt32
   put 0 into tUInt32Zed
   unsafe
      -- make new AUGraph
     put c_NewAUGraph(sAUGraph) into tOSStatus
     log tOSStatus
     -- log sAUGraph
     -- SAMPLER NODE:
     put 1970107745 into tACType -- kAudioUnitType_MusicDevice
     put 1886216563 into tACSubType -- kAudioUnitSubType_DLSSynth
     put 1819308129 into tACManufacturer -- kAudioUnitManufacturer_Apple
     -- put [1970107745,1886216563,1819308129,0,0] into tAudioComponentDescr
     put [tACType,tACSubType,tACManufacturer,tUInt32Zed,tUInt32Zed] into tAudioComponentDescr
     -- SAMPLER NODE Description:
    --  put [0,0,1819308129,1970107745,1886216563] into tAudioComponentDescr
   --  put [kAudioUnitType_MusicDevice,kAudioUnitSubType_DLSSynth,kAudioUnitManufacturer_Apple] into tAudioComponentDescr

     -- put [kAudioUnitType_MusicDevice,kAudioUnitSubType_DLSSynth,kAudioUnitManufacturer_Apple,tUInt32Zed,tUInt32Zed] into tAudioComponentDescr
     -- put [kAudioUnitType_MusicDevice,kAudioUnitSubType_Sampler,kAudioUnitManufacturer_Apple] into tAudioComponentDescr
     log tAudioComponentDescr
     put ListToNSArray(tAudioComponentDescr) into tAudioComponentDescrPtr
     put objC_AVAudioUnitMIDIInstrument(tAudioComponentDescrPtr) into sAVAUMIDIInstrument
     log sAVAUMIDIInstrument
  end unsafe
 end handler


public handler AudioToolboxCreateDLSSynth() returns nothing
   variable tOSStatus as CSInt
   variable tAudioComponentDescr as List
   variable tAudioComponentDescrPtr as ObjcId
   variable tACType as UInt32
   variable tACSubType as UInt32
   variable tACManufacturer as UInt32

   variable tUInt32Zed as UInt32
   put 0 into tUInt32Zed
   unsafe
      -- make new AUGraph
     put c_NewAUGraph(sAUGraph) into tOSStatus
     log tOSStatus
     -- log sAUGraph
     -- SAMPLER NODE:
     put 1970107745 into tACType -- kAudioUnitType_MusicDevice
     put 1886216563 into tACSubType -- kAudioUnitSubType_DLSSynth
     put 1819308129 into tACManufacturer -- kAudioUnitManufacturer_Apple
     -- put [1970107745,1886216563,1819308129,0,0] into tAudioComponentDescr
     put [tACType,tACSubType,tACManufacturer,tUInt32Zed,tUInt32Zed] into tAudioComponentDescr
     -- put [kAudioUnitType_MusicDevice,kAudioUnitSubType_Sampler,kAudioUnitManufacturer_Apple] into tAudioComponentDescr
     log tAudioComponentDescr
     put ListToNSArray(tAudioComponentDescr) into tAudioComponentDescrPtr
     put c_AUGraphAddNode(sAUGraph,tAudioComponentDescrPtr,sSynthNode) into tOSStatus
     log sSynthNode
     log tOSStatus
     -- OUTPUT NODE:
     put 1970107745 into tACType -- kAudioUnitType_Output
     put 1886216563 into tACSubType -- kAudioUnitSubType_RemoteIO
     put 1819308129 into tACManufacturer -- kAudioUnitManufacturer_Apple
     -- put [0,0,1970238817,1668245874,1819308129,0,0] into tAudioComponentDescr
     put [tACType,tACSubType,tACManufacturer,tUInt32Zed,tUInt32Zed] into tAudioComponentDescr
     -- put [kAudioUnitType_Output,kAudioUnitSubType_RemoteIO,kAudioUnitManufacturer_Apple] into tAudioComponentDescr
     put ListToNSArray(tAudioComponentDescr) into tAudioComponentDescrPtr
     put c_AUGraphAddNode(sAUGraph,tAudioComponentDescrPtr,sOutputNode) into tOSStatus
     log sSynthNode
     log tOSStatus
  end unsafe
 end handler

--	put AUGraphAddNode (outGraph, AudioComponentDescription, limiterNode) into tOSStatus

--	put AUGraphOpen (outGraph) into tOSStatus

--	put AUGraphConnectNodeInput (outGraph, synthNode, 0, limiterNode, 0) into tOSStatus
--	put AUGraphConnectNodeInput (outGraph, limiterNode, 0, outNode, 0) into tOSStatus
--	put AUGraphConnectNodeInput (outGraph, synthNode, 0, outNode, 0) into tOSStatus -- no limiter node version pm
--
--	// ok we're good to go - get the Synth Unit...
--	put AUGraphNodeInfo(outGraph, synthNode, 0, outSynth) into tOSStatus

--// some MIDI constants:
-- enum {
--	kMidiMessage_ControlChange 		= 0xB,
--	kMidiMessage_ProgramChange 		= 0xC,
--	kMidiMessage_BankMSBControl 	= 0,
--	kMidiMessage_BankLSBControl		= 32,
--	kMidiMessage_NoteOn 			= 0x9
--};

-- int main (int argc, const char * argv[]) {
--	AUGraph graph = 0;
--	AudioUnit synthUnit;
--	OSStatus result;
--	char* bankPath = 0;

--	UInt8 midiChannelInUse = 0; //we're using midi channel 1...

--		// this is the only option to main that we have...
--		// just the full path of the sample bank...

--		// On OS X there are known places were sample banks can be stored
--		// Library/Audio/Sounds/Banks - so you could scan this directory and give the user options
--		// about which sample bank to use...
--	if (argc > 1)
--		bankPath = const_cast<char*>(argv[1]);

--	put CreateAUGraph (graph, synthUnit), home) into into tOSStatus

-- // if the user supplies a sound bank, we'll set that before we initialize and start playing)
--		FSRef fsRef;
--		put FSPathMakeRef ((const UInt8*)bankPath, &fsRef, 0), home) into tOSStatus
--		put AudioUnitSetProperty (synthUnit,kMusicDeviceProperty_SoundBankFSRef,kAudioUnitScope_Global, 0, &fsRef, sizeof(fsRef)), home) into tOSStatus

--	// ok we're set up to go - initialize and start the graph
--	require_noerr (result = AUGraphInitialize (graph), home);

--		//set our bank
--	put MusicDeviceMIDIEvent(synthUnit,	kMidiMessage_ControlChange << 4 | midiChannelInUse, kMidiMessage_BankMSBControl, 0, 0/*sample offset*/), home) into tOSStatus

--	put MusicDeviceMIDIEvent(synthUnit, kMidiMessage_ProgramChange << 4 | midiChannelInUse,0/*prog change num*/, 0,0/*sample offset*/), home) into tOSStatus

--	CAShow (graph); // prints out the graph so we can see what it looks like...

--	 put AUGraphStart (graph), home) into tOSStatus

--	// we're going to play an octave of MIDI notes: one a second
--	for (int i = 0; i < 13; i++) {
--		UInt32 noteNum = i + 60;
--		UInt32 onVelocity = 127;
--		UInt32 noteOnCommand = 	kMidiMessage_NoteOn << 4 | midiChannelInUse;
--
--			log ("Playing Note: Status: 0x%lX, Note: %ld, Vel: %ld\n", noteOnCommand, noteNum, onVelocity)
--
--		put MusicDeviceMIDIEvent(synthUnit, noteOnCommand, noteNum, onVelocity, 0), home) into tOSStatus
--
--			// sleep for a second
--		usleep (1 * 1000 * 1000);
--
--		put MusicDeviceMIDIEvent(synthUnit, noteOnCommand, noteNum, 0, 0), home) into tOSStatus
--	}

--	// ok we're done now

--home:
--	if (graph) {
--		AUGraphStop (graph); // stop playback
      --- AUGraphDispose will do that for us but just showing you what to do
--		DisposeAUGraph (graph);
--	}
--	return result;
--}
end library
